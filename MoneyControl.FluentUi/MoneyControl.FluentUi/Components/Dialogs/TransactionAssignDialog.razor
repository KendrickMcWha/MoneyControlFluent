@implements IDialogContentComponent<ImportFileLineRecord>

<FluentDialogHeader>

</FluentDialogHeader>
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="SaveItem">Save</FluentButton>
    <FluentButton BackgroundColor="Crimson" Color="White" OnClick="Cancel">Cancel</FluentButton>
</FluentDialogFooter>

<FluentDialogBody>
    
    <FluentTextField @bind-Value="TransDetails" Label="Details" Style="width:28rem;margin-bottom:1rem" ReadOnly />
    
    <FluentStack Style="margin-bottom:0.5rem">
        <FluentLabel style="width:5rem" >Category</FluentLabel>
        <FluentSelect Items="@AllCategories" TOption="Category" Height="30rem"
                        @bind-SelectedOption="SelectedCategory"
                        OptionText="@(i => i.Name)" />
        <FluentSwitch @bind-Value=DefCategory Label="Default" />
    </FluentStack>
    @if (!ShowMakePayee)
    {
        <FluentStack>
            <FluentLabel style="width:5rem">Payee</FluentLabel>
        <FluentSelect Items="@AllPayees" TOption="Payee" Height="30rem"
                        @bind-SelectedOption="SelectedPayee"
                        OptionText="@(i => i.Name)" />
    </FluentStack>
    }
    <br />
    <FluentStack Orientation="Orientation.Vertical">
        <FluentSwitch @bind-Value=ShowMakePayee Label="New Payee" />
        @if(ShowMakePayee)
        {
            <FluentTextField @bind-Value="NewPayeeName" Style="width:20rem"/>
        }
    </FluentStack>
    
</FluentDialogBody>


@code {
    [CascadingParameter] public FluentDialog? Dialog { get; set; } = default!;
    [CascadingParameter] GlobalMessage MyGlobalMsg { get; set; }
    [Inject] public IUIImportService MyImportService { get; set; }
    [Parameter] public ImportFileLineRecord Content { get; set; }


    private List<Category> AllCategories { get; set; }
    private List<Payee> AllPayees { get; set; }
    private List<PayeeDetails> AllPayeeDetails { get; set; }
    private Category SelectedCategory { get; set; }
    private Payee SelectedPayee { get; set; }
    private PayeeDetails MyPayeeDetails { get; set; }
    private bool ShowMakePayee { get; set; }
    private string NewPayeeName { get; set; }
    private string TransDetails { get; set; }
    private bool DefCategory{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            TransDetails = Content.Details;
            NewPayeeName = TransDetails;

            AllPayees = await MyImportService.GetAllPayees();
            AllPayees = AllPayees.OrderBy(x => x.Name).ToList();
            AllPayees.Insert(0, new(){Id = 0, Name=string.Empty});

            AllCategories = await MyImportService.GetAllCategories();
            AllCategories = AllCategories.OrderBy(x => x.Name).ToList();
            SelectedCategory = AllCategories.Find(x => x.Name == "Unassigned");

            MyPayeeDetails = await MyImportService.GetPayeeDetails(TransDetails);
            if(MyPayeeDetails is not null)
            {
                var payee = AllPayees.Find(x => x.Id == MyPayeeDetails.PayeeId);
                if (payee is not null)
                {
                    MyPayeeDetails.PayeeName = payee.Name;
                    SelectedPayee = payee;
                    var category = AllCategories.Find(x => x.Id == payee.DefaultCategoryId);
                    if (category is not null)
                    {
                        SelectedCategory = category;
                    }
                }
            }    
            else
            {
                if (Content.DefaultPayId is not null)
                {
                    SelectedPayee = AllPayees.Find(x => x.Id == Content.DefaultPayId);
                }
                if (Content.DefaultCatId is not null)
                {
                    SelectedCategory = AllCategories.Find(x => x.Id == Content.DefaultCatId);
                }
            }
        }
        catch (Exception ex)
        {
            MyGlobalMsg.ProcessError(ex);
        }
    }

    public async void Cancel() => await Dialog.CancelAsync();
    private async void SaveItem()
    {

        if (SelectedCategory is null) { return; }
        if (!ShowMakePayee && SelectedPayee is null) return;

        if (ShowMakePayee && NewPayeeName == string.Empty) return;


        if (!ShowMakePayee )
        {
            Content.DefaultPayId = SelectedPayee.Id;
            Content.DefaultPay = SelectedPayee.Name;
        }
        else
        {
            Payee newPayee = new PayeeBuilder()
                                .WithName(NewPayeeName)
                                .WithDisplayName(NewPayeeName)
                                .Build();
            if (DefCategory)
            {
                newPayee.DefaultCategoryId = SelectedCategory.Id;
            }

            Result result = await MyImportService.CreatePayee(newPayee);
            if (!result.Success)
            {
                MyGlobalMsg.ShowWarningMessage("Save Error", result.Message);
                return;
            }
            newPayee = await MyImportService.GetPayee(SelectedPayee.Id);
            AllPayees.Add(newPayee);
            Content.DefaultPayId = newPayee.Id;
            Content.DefaultPay = newPayee.Name;
            if (MyPayeeDetails is null)
            {
                PayeeDetails newDetails = new PayeeDetailsBuilder()
                                                .WithDetails(TransDetails)
                                                .Build();                                              

                var saveDetailsResult = await MyImportService.SavePayeeDetails(newDetails);
                if (!saveDetailsResult.Success)
                {
                    MyGlobalMsg.ShowWarningMessage("Save Error", saveDetailsResult.Message);
                    return;
                }
            }

        }
        Content.DefaultCatId = SelectedCategory.Id;
        Content.DefaultCat = SelectedCategory.Name;

        await Dialog.CloseAsync(Content);
    
    }
}
