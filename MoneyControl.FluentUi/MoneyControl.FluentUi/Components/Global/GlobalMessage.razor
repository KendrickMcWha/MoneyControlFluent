<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Inject] private IDialogService MyDialog { get; set; }
    [Inject] private IMessageService MessageService { get; set; }
    [Inject] private IToastService ToastService { get; set; }

    protected override async Task OnInitializedAsync()
    {}

    protected override async void OnAfterRender(bool firstRender)
    {}

    public async void ShowOkMessage(string caption, string message)
    {
        // var parameters = new DialogParameters<MessageBoxOkOnly>
        // {
        //     {x => x.DialogBodyText, message},
        //     {x => x.ButtonOkText, "OK"}
        // };
        // var dialog = await MyDialog.ShowAsync<MessageBoxOkOnly>(caption, parameters);
        // var result = await dialog.Result;
        // var dialog = await MyDialog.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
        //     {
        //         Content = new()
        //         {
        //             Title = caption,
        //             MarkupMessage = new MarkupString(message)
        //         },
        //         PrimaryAction = "Ok",
        //         Width = "300px",
        //         SecondaryActionEnabled = false
        //     });
        var dialog = await MyDialog.ShowInfoAsync(message, caption);
        var result = await dialog.Result;
    }
    public async void ShowInfoMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowInfoAsync(message, caption);
        var result = await dialog.Result;
    }
    public async void ShowWarningMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowWarningAsync(message, caption);
        var result = await dialog.Result;
    }
    public async Task<bool> ShowConfirmMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowConfirmationAsync(message, caption);
        var result = await dialog.Result;
        return !result.Cancelled;
    }

    public async void ProcessError(Exception ex)
    {
        string msg = ex.Message;
        if (ex.InnerException is not null)
        {
            msg += Environment.NewLine + ex.InnerException;
        }
        ToastService.ShowError(msg);
        await MessageService.ShowMessageBarAsync(msg, MessageIntent.Error);

        // MessageService.ShowMessageBar(options =>
        // {
        //     options.Intent = MessageIntent.Error;
        //     options.Title = "Error";
        //     options.Body = msg;
        //     options.Section = App.MESSAGES_DIALOG;
        // }
        // );

        Serilog.Log.Warning(ex.Message);
    }
}
