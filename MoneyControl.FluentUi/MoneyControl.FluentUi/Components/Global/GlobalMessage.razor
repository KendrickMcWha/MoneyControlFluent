@using MoneyControl.FluentUi.Components.FluentUI
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Inject] private IDialogService MyDialog { get; set; }
    [Inject] private IMessageService MessageService { get; set; }
    [Inject] private IToastService MyToastService { get; set; }

    protected override async Task OnInitializedAsync()
    {}

    protected override async void OnAfterRender(bool firstRender)
    {}

    public async void ShowOkMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowInfoAsync(message, caption);
        var result = await dialog.Result;
    }
    public async void ShowInfoMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowInfoAsync(message, caption);
        var result = await dialog.Result;
    }
    public async void ShowWarningMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowWarningAsync(message, caption);
        var result = await dialog.Result;
    }
    public async Task<bool> ShowConfirmMessage(string caption, string message)
    {
        var dialog = await MyDialog.ShowConfirmationAsync(message, caption);
        var result = await dialog.Result;
        return !result.Cancelled;
    }

    public async void ProcessError(Exception ex)
    {
        string msg = ex.Message;
        if (ex.InnerException is not null)
        {
            msg += Environment.NewLine + ex.InnerException;
        }
        // MessageService.ShowMessageBar(msg, MessageIntent.Error, App.MESSAGES);
        // await MessageService.ShowMessageBarAsync(msg, MessageIntent.Error, App.MESSAGES_TOP);
        ShowToastMessage( ex);

        //ToastService.ShowError(msg);


        Serilog.Log.Warning(ex.Message);
    }

    private async void ShowToastMessage( Exception ex)
    {
        
        MyToastService.ShowToast<ToastErrorComponent, ToastErrorData>(new ToastParameters<ToastErrorData>()
            {   
                Intent = ToastIntent.Custom,
                //Title = "UNHANDLED EXCEPTION",
                Timeout = 0,
                //Icon = (new Icons.Regular.Size20.HeartPulseError(), Color.Accent),
                Content = new ToastErrorData()
                {
                    ToastParam = ex.Message
                }
            });
    }
}
