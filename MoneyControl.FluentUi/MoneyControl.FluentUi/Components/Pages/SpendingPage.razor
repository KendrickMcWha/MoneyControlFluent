@page "/spending"
@using ApexCharts
<h3>Spending</h3>

<FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
    <FluentDatePicker Label="Date From" @bind-Value="SelectedDateFrom" View="CalendarViews.Months" />
    <FluentDatePicker Label="Date To" @bind-Value="SelectedDateTo" View="CalendarViews.Months"/>
    <FluentSelect Items="@AllAccounts" TOption="Account"
                  @bind-SelectedOption="SelectedAccount"
                  OptionText="@(i => i.Name)" Label="Account"
                  Height="20rem" />
    <FluentButton style="margin-top:1.5rem" Appearance="Appearance.Accent" OnClick="ReloadData" IconStart="@(new Icons.Regular.Size20.Search())">Load</FluentButton>
</FluentStack>

@foreach (var month in AllTransMonths)
{
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
        <div>@month.MonthDate</div>        
        <div>@month.TotalCredit</div>
        <div>@month.TotalDebit</div>
        <div>@month.TotalDiff</div>
    </FluentStack>
}

@if (AllTransMonths.Any())
{
    <ApexChart TItem="TransactionMonth"
    Title="Monthly Income Expenses"
    Options="ChartOptions"
    Height="500">

        <ApexPointSeries TItem="TransactionMonth"
        Items="AllTransMonths"
        Name="Income"
        XValue="e => e.MonthDisplay"
        YValue="e => e.TotalCredit"
        SeriesType="SeriesType.Bar"
        ShowDataLabels />

        <ApexPointSeries TItem="TransactionMonth"
        Items="AllTransMonths"
        Name="Expenses"
        XValue="e => e.MonthDisplay"
        YValue="e => e.TotalDebit"
        SeriesType="SeriesType.Bar"
        ShowDataLabels />
    </ApexChart>
}
@code {
    [CascadingParameter] GlobalMessage MyGlobalMsg { get; set; }
    [Inject] public IUITransactionService MyTransactionService { get; set; }
    private List<Account> AllAccounts { get; set; } = new();
    private List<TransactionMonth> AllTransMonths { get; set; } = new();
    private ApexChartOptions<TransactionMonth> ChartOptions;
    Account _selectedAccount;
    Account SelectedAccount{ get; set; }
    DateTime? SelectedDateFrom { get; set; }
    DateTime? SelectedDateTo { get; set; }


    protected override async Task OnInitializedAsync()
    {

        SelectedDateTo = DateTime.Now.AddDays(-DateTime.Now.Day + 1).AddMonths(-1);
        SelectedDateFrom = DateTime.Now.AddDays(-DateTime.Now.Day + 1).AddMonths(-2);

        await GetAccounts();


        ChartOptions = new ApexChartOptions<TransactionMonth>
            {
                Chart = new Chart
                {
                    Stacked = true,
                },
                PlotOptions = new PlotOptions
                {
                    Bar = new PlotOptionsBar
                    {
                        Horizontal = false,
                        BorderRadius = 10,
                        BorderRadiusApplication = BorderRadiusApplication.Around,
                        BorderRadiusWhenStacked = BorderRadiusWhenStacked.All,                        
                    }
                },
                Colors = new List<string> { "#5cb85c", "#d9534f" }
            };

    }

    private async Task GetAccounts()
    {
        AllAccounts = await MyTransactionService.GetAllAccounts();
        AllAccounts.Insert(0, new Account() { Id = 0, Name = "All", Type = string.Empty });
        SelectedAccount = AllAccounts[0];
    }

    private async void ReloadData()
    {
        if (SelectedAccount is null || SelectedAccount.Id < 1) return;
        DateTime tmp = (DateTime)SelectedDateTo;

        tmp = new DateTime(tmp.Year, tmp.Month, DateTime.DaysInMonth(tmp.Year, tmp.Month));

        TransactionParamPayload payload = new(SelectedAccount.Id, 0,  
                                                DateOnly.FromDateTime((DateTime)SelectedDateFrom), 
                                                DateOnly.FromDateTime(tmp)
                                                );
        var allTrans = await MyTransactionService.GetAllTransactions(payload);

        AllTransMonths.Clear();
        foreach (var trans in allTrans)
        {
            DateOnly transMonthDate = new DateOnly(trans.BudgetDate.Year, trans.BudgetDate.Month, 1);

            int type = trans.TransType < 0 ? -1 : 1;

            TransactionMonth transactionMonth = AllTransMonths.Find(x => x.MonthDate == transMonthDate);
            if (transactionMonth is null)
            {
                AllTransMonths.Add(transactionMonth = new(transMonthDate));
            }
            transactionMonth.AllTransactions.Add(trans);
        }

        AllTransMonths.ForEach(x => x.BuildBalances());

    }

}
